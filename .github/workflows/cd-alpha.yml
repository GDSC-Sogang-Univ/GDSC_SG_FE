name: Deploy to Stage CloudFront

on:
  # stage 브랜치에 PR이 머지될 때 트리거
  push:
    branches:
      - stage

  # 수동으로 워크플로를 트리거할 때
  workflow_dispatch:

env:
  AWS_REGION: ap-northeast-2
  AWS_ROLE: ${{ secrets.AWS_ROLE }}
  S3_BUCKET_NAME: 'gdg-web-static-stage'
  S3_POST_BUCKET_NAME: 'postuploadstack-postuploadbucket7b742dca-7ubgt0k1invx'
  CLOUDFRONT_DISTRIBUTION_ID: ${{ secrets.CLOUDFRONT_STAGE_DISTRIBUTION_ID }}

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      version_name: ${{ steps.get_sha.outputs.SHA }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1

      - name: Get short SHA
        id: get_sha
        run: echo "SHA=$(git rev-parse --short HEAD)" >> "$GITHUB_OUTPUT"

  build:
    needs: [prepare]
    runs-on: ubuntu-latest
    permissions:
      id-token: 'write'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'yarn'
          cache-dependency-path: '**/yarn.lock'

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: |
          dir=$(yarn config get cacheFolder || echo "${HOME}/.yarn/cache")
          echo "dir=$dir" >> $GITHUB_OUTPUT

      - uses: actions/cache@v4
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
            ${{ runner.os }}-

      - name: Configure AWS Credentials
        id: aws-creds
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ env.AWS_ROLE }}
          role-session-name: gharolesession
          output-credentials: true

      # - name: Download blog content from S3
      #   run: |
      #     aws s3 sync s3://${{ env.S3_POST_BUCKET_NAME }} ./public/

      - name: Install Dependencies
        run: yarn install

      - name: Run Build
        run: yarn build

      - uses: actions/upload-artifact@v4
        with:
          name: build-stage-${{ needs.prepare.outputs.version_name }}
          path: out/

  deploy:
    runs-on: ubuntu-latest
    needs: [prepare, build]

    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
      - uses: actions/download-artifact@v4
        with:
          name: build-stage-${{ needs.prepare.outputs.version_name }}
          path: out/

      - name: Configure AWS Credentials
        id: aws-creds
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ env.AWS_ROLE }}
          role-session-name: gharolesession
          output-credentials: true

      - name: Remove old files from S3
        run: |
          aws s3 rm s3://${{ env.S3_BUCKET_NAME }} --recursive

      - name: Upload to S3
        run: aws s3 sync ./out s3://${{ env.S3_BUCKET_NAME }}

      - name: Invalidate Cloudfront
        run: |
          aws cloudfront create-invalidation --distribution-id ${{ env.CLOUDFRONT_DISTRIBUTION_ID }} --paths '/*'
