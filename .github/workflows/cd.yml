name: Deploy to Elastic Beanstalk

on:
  # main 브랜치에 PR이 머지될 때 트리거
  push:
    branches:
      - main
      - feat/deploy_eb

  # 수동으로 워크플로를 트리거할 때
  workflow_dispatch:

env:
  AWS_REGION: ap-northeast-2
  AWS_ROLE: ${{ secrets.AWS_ROLE }}
  REGISTRY: ${{ secrets.AWS_REGISTRY }}
  REPOSITORY: "next-production-image"

jobs:
  deploy:
    runs-on: ubuntu-latest

    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Configure AWS Credentials
        id: aws-creds
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ env.AWS_ROLE }}
          role-session-name: gharolesession
          output-credentials: true

      - name: Log in to Amazon ECR
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v2

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.REPOSITORY }}
          tags: |
            type=sha
            latest

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile
          push: true
          platforms: |
            linux/amd64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.REPOSITORY }}:cache
          cache-to: type=registry,mode=max,image-manifest=true,oci-mediatypes=true,ref=${{ env.REGISTRY }}/${{ env.REPOSITORY }}:cache

      - name: Generate Dockerrun.aws.json file
        run: |
          IMAGE_URI=${{ env.REGISTRY }}/${{ env.REPOSITORY }}
          echo '{
            "AWSEBDockerrunVersion": "1",
            "Image": {
              "Name": "'$IMAGE_URI:latest'",
              "Update": "true"
            },
            "Ports": [
              {
                "ContainerPort": "3000"
              }
            ]
          }' > Dockerrun.aws.json

      - name: Beanstalk Deploy
        uses: einaregilsson/beanstalk-deploy@v20
        with:
          aws_access_key: ${{ steps.aws-creds.outputs.aws-access-key-id }}
          aws_secret_key: ${{ steps.aws-creds.outputs.aws-secret-access-key }}
          aws_session_token : ${{ steps.aws-creds.outputs.aws-session-token }}
          application_name: ${{ secrets.AWS_APPLICATION_NAME }}
          environment_name: ${{ secrets.AWS_ENVIRONMENT_NAME }}
          version_label: ${{ github.sha }}
          use_existing_version_if_available: true
          wait_for_deployment: false
          region: ${{ secrets.AWS_REGION }}
          deployment_package: Dockerrun.aws.json
  
